using MTAA_Backend.Domain.Entities.Posts;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MTAA_Backend.Domain.Entities.Locations
{
    /// <summary>
    /// Represents a geographical location associated with a <see cref="Post"/>.
    /// This entity can store a collection of points that define a path or area,
    /// along with an event time and a version for tracking changes.
    /// </summary>
    public class Location
    {
        /// <summary>
        /// Gets or sets the unique identifier for the location.
        /// A new GUID is generated by default upon instantiation.
        /// </summary>
        public Guid Id { get; set; } = Guid.NewGuid();

        /// <summary>
        /// Gets or sets the navigation property to the <see cref="Post"/> that this location is associated with.
        /// Nullable, indicating a location might exist independently or be linked later.
        /// </summary>
        public Post? Post { get; set; }

        /// <summary>
        /// Gets or sets the foreign key to the associated <see cref="Post"/>.
        /// Nullable, indicating the location might not be linked to a post.
        /// </summary>
        public Guid? PostId { get; set; }

        /// <summary>
        /// Gets or sets the specific time and date when the event at this location occurred.
        /// </summary>
        public DateTime EventTime { get; set; }

        /// <summary>
        /// Gets or sets the version of this location data.
        /// This can be used for optimistic concurrency or change tracking.
        /// Defaults to 0.
        /// </summary>
        public int Version { get; set; } = 0;

        /// <summary>
        /// Gets or sets the collection of <see cref="LocationPoint"/>s that make up this location.
        /// This could represent a single point, a series of points forming a path, or boundaries of an area.
        /// Initialized as a new HashSet to ensure no null reference issues.
        /// </summary>
        public ICollection<LocationPoint> Points { get; set; } = new HashSet<LocationPoint>();
    }
}
