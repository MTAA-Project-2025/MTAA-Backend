using MTAA_Backend.Domain.Entities.Notifications;
using MTAA_Backend.Domain.Entities.Shared;
using MTAA_Backend.Domain.Entities.Users;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MTAA_Backend.Domain.Entities.Posts.Comments
{
    /// <summary>
    /// Represents a comment on a post, supporting nested comments and user interactions.
    /// Inherits from <see cref="BaseEntity"/> for common entity properties like creation and update timestamps.
    /// </summary>
    public class Comment : BaseEntity
    {
        /// <summary>
        /// Gets or sets the unique identifier for the comment.
        /// A new GUID is generated by default upon instantiation.
        /// </summary>
        public Guid Id { get; set; } = Guid.NewGuid();

        /// <summary>
        /// Gets or sets the text content of the comment.
        /// </summary>
        public string Text { get; set; } = string.Empty;

        /// <summary>
        /// Gets or sets the total count of likes received by this comment.
        /// Defaults to 0.
        /// </summary>
        public int LikesCount { get; set; } = 0;

        /// <summary>
        /// Gets or sets the total count of dislikes received by this comment.
        /// Defaults to 0.
        /// </summary>
        public int DislikesCount { get; set; } = 0;

        /// <summary>
        /// Gets or sets the navigation property to the <see cref="Post"/> this comment belongs to.
        /// </summary>
        public Post Post { get; set; }

        /// <summary>
        /// Gets or sets the foreign key to the associated <see cref="Post"/>.
        /// </summary>
        public Guid PostId { get; set; }

        /// <summary>
        /// Gets or sets the navigation property to the <see cref="User"/> who created this comment.
        /// </summary>
        public User Owner { get; set; } = null!;

        /// <summary>
        /// Gets or sets the foreign key to the <see cref="User"/> who owns this comment.
        /// </summary>
        public string OwnerId { get; set; }

        /// <summary>
        /// Gets or sets the navigation property to the parent <see cref="Comment"/> if this is a reply (nested comment).
        /// Nullable, as a comment can be a top-level comment.
        /// </summary>
        public Comment? ParentComment { get; set; }

        /// <summary>
        /// Gets or sets the foreign key to the parent <see cref="Comment"/> if this is a reply.
        /// Nullable.
        /// </summary>
        public Guid? ParentCommentId { get; set; }

        /// <summary>
        /// Gets or sets the collection of child <see cref="Comment"/>s (replies) to this comment.
        /// Initialized as a new HashSet to ensure no null reference issues.
        /// </summary>
        public ICollection<Comment> ChildComments { get; set; } = new HashSet<Comment>();

        /// <summary>
        /// Gets or sets the total count of child comments (replies) this comment has.
        /// Defaults to 0.
        /// </summary>
        public int ChildCommentsCount { get; set; } = 0;

        /// <summary>
        /// Gets or sets the collection of <see cref="CommentInteraction"/>s associated with this comment (e.g., likes, dislikes from users).
        /// Initialized as a new HashSet.
        /// </summary>
        public ICollection<CommentInteraction> CommentInteractions { get; set; } = new HashSet<CommentInteraction>();

        /// <summary>
        /// Gets or sets the collection of <see cref="Notification"/>s related to this comment.
        /// Initialized as a new HashSet.
        /// </summary>
        public ICollection<Notification> Notifications { get; set; } = new HashSet<Notification>();
    }
}
