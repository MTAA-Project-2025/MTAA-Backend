// <auto-generated />
using System;
using MTAA_Backend.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MTAA_Backend.Infrastructure.Migrations
{
    [DbContext(typeof(MTAA_BackendDbContext))]
    [Migration("20250313125838_remove-indexes")]
    partial class removeindexes
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BaseGroupUser", b =>
                {
                    b.Property<Guid>("GroupsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ParticipantsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("GroupsId", "ParticipantsId");

                    b.HasIndex("ParticipantsId");

                    b.ToTable("BaseGroupUser");
                });

            modelBuilder.Entity("MTAA_Backend.Domain.Entities.Files.MyFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCreationTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataLastDeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataLastEditTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("FileMessageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("GifMessageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("bit");

                    b.Property<long>("Length")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("VoiceMessageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("MyFiles");
                });

            modelBuilder.Entity("MTAA_Backend.Domain.Entities.Groups.BaseGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCreationTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataLastDeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataLastEditTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Visibility")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Type", "Visibility");

                    b.ToTable("BaseGroups");

                    b.HasDiscriminator().HasValue("BaseGroup");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("MTAA_Backend.Domain.Entities.Groups.UserGroupMembership", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNotificationEnabled")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastMessageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UnreadMessagesCount")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("LastMessageId");

                    b.HasIndex("UserId");

                    b.HasIndex("IsNotificationEnabled", "IsArchived", "UnreadMessagesCount");

                    b.ToTable("UserGroupMemberships");
                });

            modelBuilder.Entity("MTAA_Backend.Domain.Entities.Images.MyImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("AspectRatio")
                        .HasColumnType("float");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<Guid>("ImageGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ShortPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ImageGroupId");

                    b.HasIndex("Type");

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bf309314-7efa-4b60-a021-0b17a7a5da6f"),
                            AspectRatio = 1.0,
                            FileType = "jpg",
                            FullPath = "https://mtaafiles.blob.core.windows.net/images/userAvatar_1_100.jpg",
                            Height = 100,
                            ImageGroupId = new Guid("416c7d33-0a25-4176-b783-64b25919ac12"),
                            ShortPath = "userAvatar_1_100",
                            Type = 0,
                            Width = 100
                        },
                        new
                        {
                            Id = new Guid("77f98ba4-1961-435c-93c6-c351572e5837"),
                            AspectRatio = 1.0,
                            FileType = "jpg",
                            FullPath = "https://mtaafiles.blob.core.windows.net/images/userAvatar_1_300.jpg",
                            Height = 300,
                            ImageGroupId = new Guid("416c7d33-0a25-4176-b783-64b25919ac12"),
                            ShortPath = "userAvatar_1_300",
                            Type = 0,
                            Width = 300
                        },
                        new
                        {
                            Id = new Guid("5f3d5283-4fd2-4194-a4d6-345f83c967b3"),
                            AspectRatio = 1.0,
                            FileType = "jpg",
                            FullPath = "https://mtaafiles.blob.core.windows.net/images/userAvatar_2_100.jpg",
                            Height = 100,
                            ImageGroupId = new Guid("161750a4-9b50-4a1c-a5f1-3221640533c6"),
                            ShortPath = "userAvatar_2_100",
                            Type = 0,
                            Width = 100
                        },
                        new
                        {
                            Id = new Guid("ed659976-0f06-4d6a-ad9e-9456e4a82d3c"),
                            AspectRatio = 1.0,
                            FileType = "jpg",
                            FullPath = "https://mtaafiles.blob.core.windows.net/images/userAvatar_2_300.jpg",
                            Height = 300,
                            ImageGroupId = new Guid("161750a4-9b50-4a1c-a5f1-3221640533c6"),
                            ShortPath = "userAvatar_2_300",
                            Type = 0,
                            Width = 300
                        },
                        new
                        {
                            Id = new Guid("580c86e5-f708-44d2-aba1-d00b6d311ce1"),
                            AspectRatio = 1.0,
                            FileType = "jpg",
                            FullPath = "https://mtaafiles.blob.core.windows.net/images/userAvatar_3_100.jpg",
                            Height = 100,
                            ImageGroupId = new Guid("3e4f4c14-f4ae-4238-95b1-075d1e8a9981"),
                            ShortPath = "userAvatar_3_100",
                            Type = 0,
                            Width = 100
                        },
                        new
                        {
                            Id = new Guid("331f73e4-2035-45fe-9e0d-33a8a930b922"),
                            AspectRatio = 1.0,
                            FileType = "jpg",
                            FullPath = "https://mtaafiles.blob.core.windows.net/images/userAvatar_3_300.jpg",
                            Height = 300,
                            ImageGroupId = new Guid("3e4f4c14-f4ae-4238-95b1-075d1e8a9981"),
                            ShortPath = "userAvatar_3_300",
                            Type = 0,
                            Width = 300
                        },
                        new
                        {
                            Id = new Guid("4c64dbaf-3ecf-468e-8265-bc9233fc2c7e"),
                            AspectRatio = 1.0,
                            FileType = "jpg",
                            FullPath = "https://mtaafiles.blob.core.windows.net/images/userAvatar_4_100.jpg",
                            Height = 100,
                            ImageGroupId = new Guid("79fe4a86-1ca3-4dd0-ad8b-c896bef376ed"),
                            ShortPath = "userAvatar_4_100",
                            Type = 0,
                            Width = 100
                        },
                        new
                        {
                            Id = new Guid("3efe30aa-4cfa-4003-878d-054de78ea07b"),
                            AspectRatio = 1.0,
                            FileType = "jpg",
                            FullPath = "https://mtaafiles.blob.core.windows.net/images/userAvatar_4_300.jpg",
                            Height = 300,
                            ImageGroupId = new Guid("79fe4a86-1ca3-4dd0-ad8b-c896bef376ed"),
                            ShortPath = "userAvatar_4_300",
                            Type = 0,
                            Width = 300
                        },
                        new
                        {
                            Id = new Guid("3bead263-b9fd-4a6f-a649-c699969863b2"),
                            AspectRatio = 1.0,
                            FileType = "jpg",
                            FullPath = "https://mtaafiles.blob.core.windows.net/images/userAvatar_5_100.jpg",
                            Height = 100,
                            ImageGroupId = new Guid("9ad61bee-053b-4042-8b4a-860fe80dd05a"),
                            ShortPath = "userAvatar_5_100",
                            Type = 0,
                            Width = 100
                        },
                        new
                        {
                            Id = new Guid("2ea5ce43-807b-4419-a506-d68c7cba07a4"),
                            AspectRatio = 1.0,
                            FileType = "jpg",
                            FullPath = "https://mtaafiles.blob.core.windows.net/images/userAvatar_5_300.jpg",
                            Height = 300,
                            ImageGroupId = new Guid("9ad61bee-053b-4042-8b4a-860fe80dd05a"),
                            ShortPath = "userAvatar_5_300",
                            Type = 0,
                            Width = 300
                        },
                        new
                        {
                            Id = new Guid("d0c6bab5-1b86-4e29-8bcd-34e5ca1d9f2b"),
                            AspectRatio = 1.0,
                            FileType = "jpg",
                            FullPath = "https://mtaafiles.blob.core.windows.net/images/userAvatar_6_100.jpg",
                            Height = 100,
                            ImageGroupId = new Guid("d1a56d08-a7de-4855-8a13-5fbda2ca4843"),
                            ShortPath = "userAvatar_6_100",
                            Type = 0,
                            Width = 100
                        },
                        new
                        {
                            Id = new Guid("f9ab80f0-cc7f-4f3a-83fe-e25c9e81253b"),
                            AspectRatio = 1.0,
                            FileType = "jpg",
                            FullPath = "https://mtaafiles.blob.core.windows.net/images/userAvatar_6_300.jpg",
                            Height = 300,
                            ImageGroupId = new Guid("d1a56d08-a7de-4855-8a13-5fbda2ca4843"),
                            ShortPath = "userAvatar_6_300",
                            Type = 0,
                            Width = 300
                        });
                });

            modelBuilder.Entity("MTAA_Backend.Domain.Entities.Images.MyImageGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ChannelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCreationTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataLastDeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataLastEditTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("bit");

                    b.Property<Guid?>("MessageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<Guid?>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserAvatarId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId")
                        .IsUnique()
                        .HasFilter("[ChannelId] IS NOT NULL");

                    b.HasIndex("MessageId");

                    b.HasIndex("Position");

                    b.HasIndex("PostId");

                    b.ToTable("ImageGroups");

                    b.HasDiscriminator().HasValue("MyImageGroup");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("MTAA_Backend.Domain.Entities.Locations.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("MTAA_Backend.Domain.Entities.Messages.BaseMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCreationTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataLastDeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataLastEditTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("SenderId");

                    b.HasIndex("Type", "IsRead");

                    b.ToTable("BaseMessages");

                    b.HasDiscriminator().HasValue("BaseMessage");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("MTAA_Backend.Domain.Entities.Posts.Comments.Comment", b =>
                {
                    b.Property<DateTime>("DataCreationTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataLastDeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataLastEditTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("bit");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DataCreationTime");

                    b.HasIndex("PostId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("MTAA_Backend.Domain.Entities.Posts.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CommentsCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataCreationTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataLastDeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataLastEditTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("GlobalScore")
                        .HasColumnType("float");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("bit");

                    b.Property<int>("LikesCount")
                        .HasColumnType("int");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId")
                        .IsUnique()
                        .HasFilter("[LocationId] IS NOT NULL");

                    b.HasIndex("OwnerId");

                    b.HasIndex("GlobalScore", "CommentsCount", "LikesCount", "DataCreationTime", "IsDeleted", "Description");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("MTAA_Backend.Domain.Entities.Posts.PostLike", b =>
                {
                    b.Property<DateTime>("DataCreationTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("DataCreationTime");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("PostLikes");
                });

            modelBuilder.Entity("MTAA_Backend.Domain.Entities.Posts.RecommendationSystem.BaseRecommendationFeed", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("nvarchar(34)");

                    b.Property<int>("RecommendationItemsCount")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("Type", "RecommendationItemsCount");

                    b.ToTable("RecommendationFeeds");

                    b.HasDiscriminator().HasValue("BaseRecommendationFeed");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("MTAA_Backend.Domain.Entities.Posts.RecommendationSystem.RecommendationItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FeedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("LocalScore")
                        .HasColumnType("float");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FeedId");

                    b.HasIndex("LocalScore");

                    b.HasIndex("PostId");

                    b.ToTable("RecommendationItems");
                });

            modelBuilder.Entity("MTAA_Backend.Domain.Entities.Users.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<Guid?>("AvatarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DataCreationTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataLastDeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataLastEditTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastSeen")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("AvatarId")
                        .IsUnique()
                        .HasFilter("[AvatarId] IS NOT NULL");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("MTAA_Backend.Domain.Entities.Users.UserAvatar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CustomAvatarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PresetAvatarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomAvatarId")
                        .IsUnique()
                        .HasFilter("[CustomAvatarId] IS NOT NULL");

                    b.HasIndex("PresetAvatarId");

                    b.ToTable("UserAvatars");
                });

            modelBuilder.Entity("MTAA_Backend.Domain.Entities.Users.UserContact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContactId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ContactType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DataCreationTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataLastDeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataLastEditTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("UserId");

                    b.ToTable("UserContacts");
                });

            modelBuilder.Entity("MTAA_Backend.Domain.Entities.Users.UserRelationship", b =>
                {
                    b.Property<string>("User1Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("User2Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsUser1Follow")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUser2Follow")
                        .HasColumnType("bit");

                    b.HasKey("User1Id", "User2Id");

                    b.HasIndex("User2Id");

                    b.HasIndex("IsUser1Follow", "IsUser2Follow");

                    b.ToTable("UserRelationships");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PostUser", b =>
                {
                    b.Property<Guid>("WatchedPostsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WatchedUsersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("WatchedPostsId", "WatchedUsersId");

                    b.HasIndex("WatchedUsersId");

                    b.ToTable("PostUser");
                });

            modelBuilder.Entity("SharedRecommendationFeedUser", b =>
                {
                    b.Property<Guid>("SharedRecommendationFeedsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UsersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SharedRecommendationFeedsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("SharedRecommendationFeedUser");
                });

            modelBuilder.Entity("MTAA_Backend.Domain.Entities.Groups.Channel", b =>
                {
                    b.HasBaseType("MTAA_Backend.Domain.Entities.Groups.BaseGroup");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdentificationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("ImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("OwnerId");

                    b.HasIndex("IdentificationName", "DisplayName");

                    b.HasDiscriminator().HasValue("Channel");
                });

            modelBuilder.Entity("MTAA_Backend.Domain.Entities.Groups.ContactChat", b =>
                {
                    b.HasBaseType("MTAA_Backend.Domain.Entities.Groups.BaseGroup");

                    b.HasDiscriminator().HasValue("ContactChat");
                });

            modelBuilder.Entity("MTAA_Backend.Domain.Entities.Images.UserPresetAvatarImage", b =>
                {
                    b.HasBaseType("MTAA_Backend.Domain.Entities.Images.MyImageGroup");

                    b.HasDiscriminator().HasValue("UserPresetAvatarImage");

                    b.HasData(
                        new
                        {
                            Id = new Guid("416c7d33-0a25-4176-b783-64b25919ac12"),
                            DataCreationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsEdited = false,
                            Position = 0,
                            Title = "Preset Avatar"
                        },
                        new
                        {
                            Id = new Guid("161750a4-9b50-4a1c-a5f1-3221640533c6"),
                            DataCreationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsEdited = false,
                            Position = 0,
                            Title = "Preset Avatar"
                        },
                        new
                        {
                            Id = new Guid("3e4f4c14-f4ae-4238-95b1-075d1e8a9981"),
                            DataCreationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsEdited = false,
                            Position = 0,
                            Title = "Preset Avatar"
                        },
                        new
                        {
                            Id = new Guid("79fe4a86-1ca3-4dd0-ad8b-c896bef376ed"),
                            DataCreationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsEdited = false,
                            Position = 0,
                            Title = "Preset Avatar"
                        },
                        new
                        {
                            Id = new Guid("9ad61bee-053b-4042-8b4a-860fe80dd05a"),
                            DataCreationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsEdited = false,
                            Position = 0,
                            Title = "Preset Avatar"
                        },
                        new
                        {
                            Id = new Guid("d1a56d08-a7de-4855-8a13-5fbda2ca4843"),
                            DataCreationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsEdited = false,
                            Position = 0,
                            Title = "Preset Avatar"
                        });
                });

            modelBuilder.Entity("MTAA_Backend.Domain.Entities.Messages.GifMessage", b =>
                {
                    b.HasBaseType("MTAA_Backend.Domain.Entities.Messages.BaseMessage");

                    b.Property<Guid>("FileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("FileId")
                        .IsUnique()
                        .HasFilter("[FileId] IS NOT NULL");

                    b.ToTable("BaseMessages", t =>
                        {
                            t.Property("FileId")
                                .HasColumnName("GifMessage_FileId");
                        });

                    b.HasDiscriminator().HasValue("GifMessage");
                });

            modelBuilder.Entity("MTAA_Backend.Domain.Entities.Messages.TextMessage", b =>
                {
                    b.HasBaseType("MTAA_Backend.Domain.Entities.Messages.BaseMessage");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("TextMessage");
                });

            modelBuilder.Entity("MTAA_Backend.Domain.Entities.Messages.VoiceMessage", b =>
                {
                    b.HasBaseType("MTAA_Backend.Domain.Entities.Messages.BaseMessage");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<Guid>("FileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("FileId")
                        .IsUnique()
                        .HasFilter("[FileId] IS NOT NULL");

                    b.ToTable("BaseMessages", t =>
                        {
                            t.Property("FileId")
                                .HasColumnName("VoiceMessage_FileId");
                        });

                    b.HasDiscriminator().HasValue("VoiceMessage");
                });

            modelBuilder.Entity("MTAA_Backend.Domain.Entities.Posts.RecommendationSystem.LocalRecommendationFeed", b =>
                {
                    b.HasBaseType("MTAA_Backend.Domain.Entities.Posts.RecommendationSystem.BaseRecommendationFeed");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("IsActive");

                    b.HasIndex("UserId");

                    b.HasDiscriminator().HasValue("LocalRecommendationFeed");
                });

            modelBuilder.Entity("MTAA_Backend.Domain.Entities.Posts.RecommendationSystem.SharedRecommendationFeed", b =>
                {
                    b.HasBaseType("MTAA_Backend.Domain.Entities.Posts.RecommendationSystem.BaseRecommendationFeed");

                    b.HasDiscriminator().HasValue("SharedRecommendationFeed");
                });

            modelBuilder.Entity("MTAA_Backend.Domain.Entities.Messages.FileMessage", b =>
                {
                    b.HasBaseType("MTAA_Backend.Domain.Entities.Messages.TextMessage");

                    b.Property<Guid>("FileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("FileId")
                        .IsUnique()
                        .HasFilter("[FileId] IS NOT NULL");

                    b.HasDiscriminator().HasValue("FileMessage");
                });

            modelBuilder.Entity("MTAA_Backend.Domain.Entities.Messages.ImagesMessage", b =>
                {
                    b.HasBaseType("MTAA_Backend.Domain.Entities.Messages.TextMessage");

                    b.HasDiscriminator().HasValue("ImagesMessage");
                });

            modelBuilder.Entity("BaseGroupUser", b =>
                {
                    b.HasOne("MTAA_Backend.Domain.Entities.Groups.BaseGroup", null)
                        .WithMany()
                        .HasForeignKey("GroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MTAA_Backend.Domain.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("ParticipantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MTAA_Backend.Domain.Entities.Groups.UserGroupMembership", b =>
                {
                    b.HasOne("MTAA_Backend.Domain.Entities.Groups.BaseGroup", "Group")
                        .WithMany("UserGroupMemberships")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MTAA_Backend.Domain.Entities.Messages.BaseMessage", "LastMessage")
                        .WithMany("LastMessageUserGroupMemberships")
                        .HasForeignKey("LastMessageId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("MTAA_Backend.Domain.Entities.Users.User", "User")
                        .WithMany("UserGroupMemberships")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("LastMessage");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MTAA_Backend.Domain.Entities.Images.MyImage", b =>
                {
                    b.HasOne("MTAA_Backend.Domain.Entities.Images.MyImageGroup", "ImageGroup")
                        .WithMany("Images")
                        .HasForeignKey("ImageGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ImageGroup");
                });

            modelBuilder.Entity("MTAA_Backend.Domain.Entities.Images.MyImageGroup", b =>
                {
                    b.HasOne("MTAA_Backend.Domain.Entities.Groups.Channel", "Channel")
                        .WithOne("Image")
                        .HasForeignKey("MTAA_Backend.Domain.Entities.Images.MyImageGroup", "ChannelId");

                    b.HasOne("MTAA_Backend.Domain.Entities.Messages.ImagesMessage", "Message")
                        .WithMany("Images")
                        .HasForeignKey("MessageId");

                    b.HasOne("MTAA_Backend.Domain.Entities.Posts.Post", "Post")
                        .WithMany("Images")
                        .HasForeignKey("PostId");

                    b.Navigation("Channel");

                    b.Navigation("Message");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("MTAA_Backend.Domain.Entities.Messages.BaseMessage", b =>
                {
                    b.HasOne("MTAA_Backend.Domain.Entities.Groups.BaseGroup", "Group")
                        .WithMany("Messages")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MTAA_Backend.Domain.Entities.Users.User", "Sender")
                        .WithMany("Messages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("MTAA_Backend.Domain.Entities.Posts.Comments.Comment", b =>
                {
                    b.HasOne("MTAA_Backend.Domain.Entities.Posts.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("MTAA_Backend.Domain.Entities.Posts.Post", b =>
                {
                    b.HasOne("MTAA_Backend.Domain.Entities.Locations.Location", "Location")
                        .WithOne("Post")
                        .HasForeignKey("MTAA_Backend.Domain.Entities.Posts.Post", "LocationId");

                    b.HasOne("MTAA_Backend.Domain.Entities.Users.User", "Owner")
                        .WithMany("CreatedPosts")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("MTAA_Backend.Domain.Entities.Posts.PostLike", b =>
                {
                    b.HasOne("MTAA_Backend.Domain.Entities.Posts.Post", "Post")
                        .WithMany("Likes")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MTAA_Backend.Domain.Entities.Users.User", "User")
                        .WithMany("LikedPosts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MTAA_Backend.Domain.Entities.Posts.RecommendationSystem.RecommendationItem", b =>
                {
                    b.HasOne("MTAA_Backend.Domain.Entities.Posts.RecommendationSystem.BaseRecommendationFeed", "Feed")
                        .WithMany("RecommendationItems")
                        .HasForeignKey("FeedId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MTAA_Backend.Domain.Entities.Posts.Post", "Post")
                        .WithMany("RecommendationItems")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feed");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("MTAA_Backend.Domain.Entities.Users.User", b =>
                {
                    b.HasOne("MTAA_Backend.Domain.Entities.Users.UserAvatar", "Avatar")
                        .WithOne("User")
                        .HasForeignKey("MTAA_Backend.Domain.Entities.Users.User", "AvatarId");

                    b.Navigation("Avatar");
                });

            modelBuilder.Entity("MTAA_Backend.Domain.Entities.Users.UserAvatar", b =>
                {
                    b.HasOne("MTAA_Backend.Domain.Entities.Images.MyImageGroup", "CustomAvatar")
                        .WithOne("UserAvatar")
                        .HasForeignKey("MTAA_Backend.Domain.Entities.Users.UserAvatar", "CustomAvatarId");

                    b.HasOne("MTAA_Backend.Domain.Entities.Images.UserPresetAvatarImage", "PresetAvatar")
                        .WithMany("UserAvatars")
                        .HasForeignKey("PresetAvatarId");

                    b.Navigation("CustomAvatar");

                    b.Navigation("PresetAvatar");
                });

            modelBuilder.Entity("MTAA_Backend.Domain.Entities.Users.UserContact", b =>
                {
                    b.HasOne("MTAA_Backend.Domain.Entities.Users.User", "Contact")
                        .WithMany("ContactOf")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MTAA_Backend.Domain.Entities.Users.User", "User")
                        .WithMany("Contacts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MTAA_Backend.Domain.Entities.Users.UserRelationship", b =>
                {
                    b.HasOne("MTAA_Backend.Domain.Entities.Users.User", "User1")
                        .WithMany("UserRelationships1")
                        .HasForeignKey("User1Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MTAA_Backend.Domain.Entities.Users.User", "User2")
                        .WithMany("UserRelationships2")
                        .HasForeignKey("User2Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User1");

                    b.Navigation("User2");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MTAA_Backend.Domain.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MTAA_Backend.Domain.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MTAA_Backend.Domain.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MTAA_Backend.Domain.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PostUser", b =>
                {
                    b.HasOne("MTAA_Backend.Domain.Entities.Posts.Post", null)
                        .WithMany()
                        .HasForeignKey("WatchedPostsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MTAA_Backend.Domain.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("WatchedUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SharedRecommendationFeedUser", b =>
                {
                    b.HasOne("MTAA_Backend.Domain.Entities.Posts.RecommendationSystem.SharedRecommendationFeed", null)
                        .WithMany()
                        .HasForeignKey("SharedRecommendationFeedsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MTAA_Backend.Domain.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MTAA_Backend.Domain.Entities.Groups.Channel", b =>
                {
                    b.HasOne("MTAA_Backend.Domain.Entities.Users.User", "Owner")
                        .WithMany("OwnedChannels")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("MTAA_Backend.Domain.Entities.Messages.GifMessage", b =>
                {
                    b.HasOne("MTAA_Backend.Domain.Entities.Files.MyFile", "File")
                        .WithOne("GifMessage")
                        .HasForeignKey("MTAA_Backend.Domain.Entities.Messages.GifMessage", "FileId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("File");
                });

            modelBuilder.Entity("MTAA_Backend.Domain.Entities.Messages.VoiceMessage", b =>
                {
                    b.HasOne("MTAA_Backend.Domain.Entities.Files.MyFile", "File")
                        .WithOne("VoiceMessage")
                        .HasForeignKey("MTAA_Backend.Domain.Entities.Messages.VoiceMessage", "FileId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("File");
                });

            modelBuilder.Entity("MTAA_Backend.Domain.Entities.Posts.RecommendationSystem.LocalRecommendationFeed", b =>
                {
                    b.HasOne("MTAA_Backend.Domain.Entities.Users.User", "User")
                        .WithMany("LocalRecommendationFeeds")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MTAA_Backend.Domain.Entities.Messages.FileMessage", b =>
                {
                    b.HasOne("MTAA_Backend.Domain.Entities.Files.MyFile", "File")
                        .WithOne("FileMessage")
                        .HasForeignKey("MTAA_Backend.Domain.Entities.Messages.FileMessage", "FileId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("File");
                });

            modelBuilder.Entity("MTAA_Backend.Domain.Entities.Files.MyFile", b =>
                {
                    b.Navigation("FileMessage");

                    b.Navigation("GifMessage");

                    b.Navigation("VoiceMessage");
                });

            modelBuilder.Entity("MTAA_Backend.Domain.Entities.Groups.BaseGroup", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("UserGroupMemberships");
                });

            modelBuilder.Entity("MTAA_Backend.Domain.Entities.Images.MyImageGroup", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("UserAvatar");
                });

            modelBuilder.Entity("MTAA_Backend.Domain.Entities.Locations.Location", b =>
                {
                    b.Navigation("Post");
                });

            modelBuilder.Entity("MTAA_Backend.Domain.Entities.Messages.BaseMessage", b =>
                {
                    b.Navigation("LastMessageUserGroupMemberships");
                });

            modelBuilder.Entity("MTAA_Backend.Domain.Entities.Posts.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Images");

                    b.Navigation("Likes");

                    b.Navigation("RecommendationItems");
                });

            modelBuilder.Entity("MTAA_Backend.Domain.Entities.Posts.RecommendationSystem.BaseRecommendationFeed", b =>
                {
                    b.Navigation("RecommendationItems");
                });

            modelBuilder.Entity("MTAA_Backend.Domain.Entities.Users.User", b =>
                {
                    b.Navigation("ContactOf");

                    b.Navigation("Contacts");

                    b.Navigation("CreatedPosts");

                    b.Navigation("LikedPosts");

                    b.Navigation("LocalRecommendationFeeds");

                    b.Navigation("Messages");

                    b.Navigation("OwnedChannels");

                    b.Navigation("UserGroupMemberships");

                    b.Navigation("UserRelationships1");

                    b.Navigation("UserRelationships2");
                });

            modelBuilder.Entity("MTAA_Backend.Domain.Entities.Users.UserAvatar", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("MTAA_Backend.Domain.Entities.Groups.Channel", b =>
                {
                    b.Navigation("Image");
                });

            modelBuilder.Entity("MTAA_Backend.Domain.Entities.Images.UserPresetAvatarImage", b =>
                {
                    b.Navigation("UserAvatars");
                });

            modelBuilder.Entity("MTAA_Backend.Domain.Entities.Messages.ImagesMessage", b =>
                {
                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}
